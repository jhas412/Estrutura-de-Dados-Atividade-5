/*
UFPB - Universidade Federal da Paraíba
Curso: Ciências da Computação
Aluno: João Henrique Alves de Sousa
Matricula: 20230012690
Disciplina: Estrutura de dados
Professor Gilberto Farias
Período: 2024.1


				Atividade Grafos
*/
package grafos;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class Grafos {

    private int[][] matrizAdjacencia;
    private ArrayList<LinkedList<Integer>> listaAdjacencia;
    private int numVertices;

    public Grafos(int numVertices) {
        this.numVertices = numVertices;

        matrizAdjacencia = new int[numVertices][numVertices];

        listaAdjacencia = new ArrayList<>(numVertices);
        for (int i = 0; i < numVertices; i++) {
            listaAdjacencia.add(new LinkedList<>());
        }
    }

    public void adicionarAresta(int origem, int destino, int peso) {
        matrizAdjacencia[origem][destino] = peso;

        if (peso > 0) {
            listaAdjacencia.get(origem).add(destino);
        }
    }

    public void imprimirMatrizAdjacencia() {
        System.out.println("Matriz de Adjacencia:");
        for (int[] linha : matrizAdjacencia) {
            for (int valor : linha) {
                System.out.print(valor + "\t");
            }
            System.out.println();
        }
    }

    public void imprimirListaAdjacencia() {
        System.out.println("Lista de Adjacencia:");
        for (int i = 0; i < listaAdjacencia.size(); i++) {
            System.out.print("Vértice " + i + ": ");
            for (Integer adj : listaAdjacencia.get(i)) {
                System.out.print(adj + " ");
            }
            System.out.println();
        }
    }

    public boolean bfs(int origem, int destino, int[] antecessores) {
        boolean[] visitado = new boolean[numVertices];
        LinkedList<Integer> fila = new LinkedList<>();

        visitado[origem] = true;
        fila.add(origem);

        Arrays.fill(antecessores, -1);

        while (!fila.isEmpty()) {
            int verticeAtual = fila.poll();

            for (int vizinho : listaAdjacencia.get(verticeAtual)) {
                if (!visitado[vizinho]) {
                    visitado[vizinho] = true;
                    antecessores[vizinho] = verticeAtual;
                    fila.add(vizinho);

                    if (vizinho == destino) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    public boolean dfsIterativa(int origem, int destino, int[] antecessores) {
        boolean[] visitado = new boolean[numVertices];
        Stack<Integer> pilha = new Stack<>();

        pilha.push(origem);
        Arrays.fill(antecessores, -1);

        while (!pilha.isEmpty()) {
            int verticeAtual = pilha.pop();

            if (!visitado[verticeAtual]) {
                visitado[verticeAtual] = true;

                for (int vizinho : listaAdjacencia.get(verticeAtual)) {
                    if (!visitado[vizinho]) {
                        antecessores[vizinho] = verticeAtual;
                        pilha.push(vizinho);

                        if (vizinho == destino) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

    public void imprimirCaminhoBFS(int origem, int destino) {
        int[] antecessores = new int[numVertices];

        boolean caminhoEncontrado = bfs(origem, destino, antecessores);

        if (!caminhoEncontrado) {
            System.out.println("Nao he caminho entre os vertices " + origem + " e " + destino + " usando BFS.");
            return;
        }

        LinkedList<Integer> caminho = new LinkedList<>();
        for (int at = destino; at != -1; at = antecessores[at]) {
            caminho.addFirst(at);
        }

        System.out.println("Caminho entre " + origem + " e " + destino + " usando BFS: " + caminho);
    }

    public void imprimirCaminhoDFS(int origem, int destino) {
        int[] antecessores = new int[numVertices];

        boolean caminhoEncontrado = dfsIterativa(origem, destino, antecessores);

        if (!caminhoEncontrado) {
            System.out.println("Nao ha caminho entre os vertices " + origem + " e " + destino + " usando DFS.");
            return;
        }

        LinkedList<Integer> caminho = new LinkedList<>();
        for (int at = destino; at != -1; at = antecessores[at]) {
            caminho.addFirst(at);
        }

        System.out.println("Caminho entre " + origem + " e " + destino + " usando DFS: " + caminho);
    }

    public static Grafos lerGrafoDeArquivo(String caminhoArquivo) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(caminhoArquivo));
        String linha = br.readLine();

        int numVertices = Integer.parseInt(linha);
        Grafos grafo = new Grafos(numVertices);

        int linhaIndex = 0;
        while ((linha = br.readLine()) != null) {
            String[] valores = linha.trim().split("\\s+");
            for (int colunaIndex = 0; colunaIndex < valores.length; colunaIndex++) {
                int peso = Integer.parseInt(valores[colunaIndex]);
                grafo.adicionarAresta(linhaIndex, colunaIndex, peso);
            }
            linhaIndex++;
        }

        br.close();
        return grafo;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Digite o numero do caso a ser lido:");
        System.out.println("1 - pcv4.txt\n2 - pcv10.txt\n3 - pcv50.txt\n4 - pcv177.txt\n");
        
        int n = scanner.nextInt();
        while (n != 1 && n != 2 && n != 3 && n != 4) {
            System.out.println("Numero invalido, tente novamente.");
            n = scanner.nextInt();
        }
        
        String s = null;
        switch (n) {
            case 1:
                s = "pcv4.txt";
                break;
            case 2:
                s = "pcv10.txt";
                break;
            case 3:
                s = "pcv50.txt";
                break;
            case 4:
                s = "pcv177.txt";
                break;
        }

        try {
            Grafos grafo = Grafos.lerGrafoDeArquivo(s);

            grafo.imprimirMatrizAdjacencia();
            grafo.imprimirListaAdjacencia();

            System.out.println("Digite o vertice de origem:");
            int origem = scanner.nextInt();
            
            System.out.println("Digite o vertice de destino:");
            int destino = scanner.nextInt();

            grafo.imprimirCaminhoBFS(origem, destino);

            grafo.imprimirCaminhoDFS(origem, destino);

        } catch (IOException e) {
            System.out.println("Erro ao ler o arquivo: " + e.getMessage());
        }
    }
}
